
cbuffer SkyBuffer : register(b0)
{
  float g_Translation;
  float g_Scale;
  float g_Brightness;
  float padding;
};

Texture2D g_CloundTex  : register(t0);
Texture2D g_PerturbTex : register(t1);

SamplerState g_SampleState : register(s0);

struct VS_OUT
{
  float4 Pos : SV_POSITION;
  float2 Tex : TEXCOORD0;
};

float4 PS(VS_OUT vs_out): SV_TARGET
{
  vs_out.Tex.x += g_Translation;

  float4 perturbValue = g_PerturbTex.Sample(g_SampleState, vs_out.Tex);
  perturbValue *= g_Scale;
  perturbValue.xy = perturbValue + vs_out.Tex + g_Translation;

  float4 texColor = g_CloundTex.Sample(g_SampleState, perturbValue.xy);
  texColor *= g_Brightness;

  return texColor;
}


