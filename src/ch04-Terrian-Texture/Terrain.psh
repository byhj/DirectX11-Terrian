
struct Light
{
   float4 ambient;
   float4 diffuse;
   float3 lightDir;
   float  pad; 
};

cbuffer LightBuffer : register(b0)
{
   Light cbLight;
};

struct VS_OUT
{
    float4 Pos    : SV_POSITION;
    float3 Normal : NORMAL;
	float2 Tex    : TEXCOORD;
};

Texture2D tex     : register(t0);
SamplerState texState : register(s0);

float4 TerrainPS(VS_OUT ps_in) : SV_TARGET
{

   float4 textureColor = tex.Sample(texState, ps_in.Tex);

   ps_in.Normal = normalize(ps_in.Normal);
   float4 pixelColor = cbLight.ambient;

   float3 lightDir  = -(cbLight.lightDir);
   float  intensity = max( dot(lightDir, ps_in.Normal), 0.0f);
   float4 diffuse   = intensity * cbLight.diffuse;

   pixelColor += diffuse;
   return saturate(pixelColor) * textureColor;
}