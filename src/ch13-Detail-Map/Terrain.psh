
struct Light
{
   float4 ambient;
   float4 diffuse;
   float3 lightDir;
   float  pad; 
};

cbuffer LightBuffer : register(b0)
{
   Light cbLight;
};

struct VS_OUT
{
    float4 Pos    : SV_POSITION;
    float3 Normal : NORMAL;
	float2 Tex    : TEXCOORD;
	float3 Color  : COLOR0;
	float4 DepthPos : TEXCOORD1;
};


Texture2D g_ColorTex    : register(t0);
Texture2D g_DetailTex   : register(t1);

SamplerState g_TexState : register(s0);

float4 TerrainPS(VS_OUT vs_out) : SV_TARGET
{

   float4 texColor = g_ColorTex.Sample(g_TexState, vs_out.Tex.xy);

   float depthValue = vs_out.DepthPos.z / vs_out.DepthPos.w;

   //Check if the depth value is closse to the screen, if so we will apply the detail texture
    if (depthValue < 0.9)
	{
	 float4 detailColor = g_DetailTex.Sample(g_TexState, vs_out.Tex.xy);
	 float detailBrightness = 1.8f;
	// texColor = texColor * detailColor * detailBrightness;
   }

   vs_out.Normal = normalize(vs_out.Normal);
   float4 pixelColor = cbLight.ambient;

   float3 lightDir  = -(cbLight.lightDir);
   float  intensity = max( dot(lightDir, vs_out.Normal), 0.0f);
   float4 diffuse   = intensity * cbLight.diffuse;

   pixelColor += diffuse;
   return texColor; //saturate(pixelColor * texColor * float4(vs_out.Color, 1.0f) * 2.0f);
}